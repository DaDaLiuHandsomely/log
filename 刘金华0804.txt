1、unshift()  shift()  push()  pop()  splice()

     	unshift在数组头部添加一个值，shift在数组头部删除一个值；
	
     	push在数组尾部添加一个值，pop在数组尾部删除一个值；
	
     	splice(index,howmany,item1,.....,itemX)
     	index	必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。
     	howmany	必需。要删除的项目数量。如果设置为 0，则不会删除项目。
     	item1, ..., itemX	可选。向数组添加的新项目。

2、join()   toString()

     join()   参数	可选。指定要使用的分隔符。如果省略该参数，则使用逗号作为分隔符。

     toString() 方法可把一个逻辑值转换为字符串，并返回结果。还可以把数组转化为用逗号作为分隔符的                字符串，例:
                     var arr = ['a','c','b','d'];
                     console.log(arr.toString());
            结果:
                     a,c,b,d

3、sort()    reverse()
     
      sort() 方法用于对数组的元素进行排序。
     参数	可选。规定排序顺序。必须是函数。
      如果调用该方法时没有使用参数，将按字母顺序对数组中的元素进行排序，说得更精确点，是按照字       符编码的顺序进行排序。要实现这一点，首先应把数组的元素都转换成字符串（如有必要），以便进行比较。
       如果想按照其他标准进行排序，就需要提供比较函数，该函数要比较两个值，然后返回一个用于说明这两个值的相对顺序的数字。比较函数应该具有两个参数 a 和 b，其返回值如下：
        若 a 小于 b，在排序后的数组中 a 应该出现在 b 之前，则返回一个小于 0 的值。
        若 a 等于 b，则返回 0。
        若 a 大于 b，则返回一个大于 0 的值。
             例:
                  function sortNumber(a,b)
                  {
                     return a - b
                  }
                  var arr = new Array(6)
                  arr[0] = "10"
                  arr[1] = "5"
                  arr[2] = "40"
                  arr[3] = "25"
                  arr[4] = "1000"
                  arr[5] = "1"
                 document.write(arr + "<br />")
                 document.write(arr.sort(sortNumber))
          结果:
                 10,5,40,25,1000,1
                 1,5,10,25,40,1000

      reverse() 方法用于反向排序数组中元素。

4、slice()   concat()

      slice(start,end) 方法可从已有的数组中返回选定的元素。
      start       	必需。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。
      end	        可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。

       concat() 将两个数组合并。
       参数为数组。例:
                                  var arr = [a,b,c]
                                  arr.concat([1,2,3])
5、多维数组遍历

		for(i = 0;i<arr.length;i++){
    			for(j = 0;j<arr[i].length;j++){

    				}
			}
			
		6、键盘按下事件
window.onkeydown = function(e){
     		switch(e.keyCode){}
}
11个数组方法
多维数组实现数字显现和读秒
游戏常用的方块移动和触碰物体使物体消失的js代码
